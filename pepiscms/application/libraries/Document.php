<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

/**
 * PepisCMS
 *
 * Simple content management system
 *
 * @package             PepisCMS
 * @author              Piotr Polak
 * @copyright           Copyright (c) 2007-2018, Piotr Polak
 * @license             See license.txt
 * @link                http://www.polak.ro/
 */

/**
 * HTML Document representation.
 * Document instance is generated by module (frontend) or builtin component and passed to the theme template.
 *
 * @since 0.2.0
 */
class Document
{

    /** @var int */
    private $id;
    /** @var string */
    private $contents;
    /** @var string */
    private $title;
    /** @var string */
    private $description;
    /** @var string */
    private $keywords;
    /** @var string */
    private $relative_url = NULL;
    /** @var string */
    private $canonical_url = NULL;
    /** @var bool */
    private $is_default = FALSE;
    /** @var object */
    private $CI;
    /** @var string */
    private $page_style;
    /** @var array */
    private $page_stylesheets;
    /** @var array */
    private $page_javascript;
    /** @var int */
    private $menu_item_id = NULL; // To be checked if needed
    /** @var Menu */
    private $menu = NULL; // Kind of cache

    /**
     * Document constructor.
     * @param null|array $params
     */
    public function __construct($params = NULL)
    {
        $this->CI = &get_instance();
        $this->CI->load->model('Menu_model');
    }

    /**
     * Returns ID of the current menu item
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets ID of the current menu item
     *
     * @param int $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * Returns ID of menu item if page attached to menu, otherwise FALSE
     *
     * @return int
     */
    public function getMenuItemId()
    {
        if ($this->menu_item_id == null) {
            $this->menu_item_id = $this->CI->Menu_model->getItemIdByPageId($this->getId());
        }

        return $this->menu_item_id;
    }

    /**
     * Returns full menu tree for a given language
     * All URLs are prefixed and "ready to use"
     *
     * @return Menu
     */
    public function getMenu()
    {
        if ($this->menu == NULL) {
            $this->menu = new Menu();
        }
        return $this->menu;
    }

    /**
     * Sets page title
     *
     * @param $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * Returns page title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Sets page contents
     *
     * @param string $contents
     */
    public function setContents($contents)
    {
        $this->contents = $contents;
    }

    /**
     * Returns page contents
     *
     * @return string
     */
    public function getContents()
    {
        return $this->contents;
    }

    /**
     * Sets page description
     *
     * @param $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * Returns page description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets page keywords
     *
     * @param $keywords
     */
    public function setKeywords($keywords)
    {
        $this->keywords = $keywords;
    }

    /**
     * Returns page keywords
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->keywords;
    }

    /**
     * Sets canonical absolute URL of the page
     *
     * @param string $canonical_url
     */
    public function setCanonicalAbsoluteUrl($canonical_url)
    {
        $this->canonical_url = $canonical_url;
    }

    /**
     * Returns absolute canonical URL, if it does not exist, then it is created from relative URL
     *
     * @return string
     */
    public function getCanonicalAbsoluteUrl()
    {
        if ($this->canonical_url === NULL) {
            $this->setCanonicalAbsoluteUrl(base_url() . $this->getRelativeUrl());
        }
        return $this->canonical_url;
    }

    /**
     * Sets relative URL
     *
     * @param string $relative_url
     */
    public function setRelativeUrl($relative_url)
    {
        $this->relative_url = $relative_url;
    }

    /**
     * Returns relative URL
     *
     * @return string
     */
    public function getRelativeUrl()
    {
        return $this->relative_url;
    }

    /**
     * Makes the page default
     *
     * @param bool $is_default
     */
    public function setDefault($is_default = TRUE)
    {
        $this->is_default = $is_default;
    }

    /**
     * Tells whether the page is default
     *
     * @return bool
     */
    public function isDefault()
    {
        return $this->is_default;
    }

    /**
     * Returns URL prefix
     * For the default language the prefix is empty
     *
     * @return string
     */
    public function getLanguagePrefix()
    {
        return Dispatcher::getUriPrefix();
    }

    /**
     * Returns URL code
     * Similar to getLanguagePrefix() but it always returns a value
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return Dispatcher::getSiteLanguage()->code;
    }

    /**
     * Returns the breadcrumb items
     *
     * @return array
     */
    public function getBreadcrumbMenuItems()
    {
        $breadcrumb_items = array();
        $item = $this->getMenu()->getMenuItemByCanonicalAbsoluteUrl($this->getCanonicalAbsoluteUrl());

        if ($item) {
            while (TRUE) {
                $breadcrumb_items[] = $item;
                $parent = $item->getParent();

                if (!($parent instanceof MenuItem)) // When we reach top most element
                {
                    break;
                }
                $item = $parent;
            }
        }

        $breadcrumb_items = array_reverse($breadcrumb_items);
        return $breadcrumb_items;
    }

    /* Compatibility */

    /**
     * Returns formatted style, ready to inject
     *
     * @return string
     */
    public function getPageStyles()
    {
        $styles = '';

        if (isset($this->page_style)) {
            $styles = '<style type="text/css">' . "\n<!--\n" . $this->page_style . "\n-->\n</style>\n";
        }
        if (count($this->page_stylesheets)) {
            foreach ($this->page_stylesheets as $stylesheet) {
                $styles .= '<link rel="stylesheet" type="text/css" href="' . site_theme_url() . $stylesheet . '" media="screen" />' . "\n";
            }
        }

        return $styles;
    }

    /**
     * Returns formatted JS, ready to inject
     *
     * @return string
     */
    public function getPageJavaScript()
    {
        $code = '';

        if (count($this->page_javascript)) {
            foreach ($this->page_javascript as $item) {
                $code .= '<script src="' . site_theme_url() . $item . '" type="text/javascript"></script>' . "\n";
            }
        }

        return $code;
    }

    /**
     * Inserts code to style section
     *
     * @param string $styles
     */
    public function addInlinePageStyles($styles)
    {
        if (isset($this->page_style)) {
            $this->page_style .= $styles;
        } else {
            $this->page_style = $styles;
        }
    }

    /**
     * Attaches stylesheet
     *
     * @param string $stylesheet_name
     */
    public function attachStyleSheet($stylesheet_name)
    {
        $this->page_stylesheets[] = $stylesheet_name;
    }


    /**
     * @param string $stylesheet_name
     * @deprecated as PepisCMS 1.0.0
     */
    public function attachSyleSheet($stylesheet_name)
    {
        $this->attachStyleSheet($stylesheet_name);
    }

    /**
     * Attaches JavaScript
     *
     * @param string $javascript_file_name
     */
    public function attachJavaScript($javascript_file_name)
    {
        $this->page_javascript[] = $javascript_file_name;
    }

    /**
     * Overwrites the entire array of stylesheets
     *
     * @param array $stylesheets
     */
    public function setStyleSheets($stylesheets)
    {
        $this->page_stylesheets = $stylesheets;
    }

    /**
     * Sets JavaScript
     *
     * @param array $javascript
     */
    public function setJavaScript($javascript)
    {
        $this->page_javascript = $javascript;
    }

}

/**
 * Menu tree representation used by theme template (frontend).
 * Contains subelements called MenuItems.
 *
 * @since 0.2
 */
class Menu
{
    /** @var array|null */
    private $children = NULL;

    /**
     * Returns children elements of the current menu element
     *
     * @return array
     */
    public function getChildren()
    {
        // Initializing children
        if ($this->children == NULL) {
            $this->initializeChildren();
            $menu_items_array = get_instance()->Menu_model->getSubMenu($this->getId(), Dispatcher::getSiteLanguage()->code); // Hardcoded, to be fixed
            foreach ($menu_items_array as &$item) {
                $menu_item = new MenuItem();
                $menu_item->setLabel($item['item_name']);
                $menu_item->setId($item['item_id']);
                $menu_item->setParentId($item['parent_item_id']);
                $menu_item->setRelativeUrl(Menu::getItemUrl($item, Dispatcher::getUriPrefix())); // Hardcoded, to be fixed
                $menu_item->setParent($this);
                $this->addChild($menu_item);
            }
        }

        return $this->children;
    }

    /**
     * Return menu item by ID
     *
     * @param MenuItem $url
     * @return MenuItem
     */
    public function getMenuItemByCanonicalAbsoluteUrl($url)
    {
        return self::searchForChildByCanonicalAbsoluteUrl($this->getChildren(), $url);
    }

    /**
     * Static recursive function that parses all element structure
     *
     * @param Menu $children
     * @param string $url
     * @return bool|MenuItem
     */
    private static function searchForChildByCanonicalAbsoluteUrl($children, $url)
    {
        if (!is_array($children) || !(count($children) > 0)) {
            return FALSE;
        }

        foreach ($children as $sub_child) {
            /** @var MenuItem $sub_child */
            if ($sub_child->getCanonicalAbsoluteUrl() == $url) {
                return $sub_child;
            }


            $sub_child = self::searchForChildByCanonicalAbsoluteUrl($sub_child->getChildren(), $url);
            if ($sub_child) {
                return $sub_child;
            }
        }

        return FALSE;
    }

    /**
     * Compatibility, will always return 0
     *
     * @return int
     */
    protected function getId()
    {
        return 0;
    }

    /**
     * Compatibility, will always return FALSE
     *
     * @return bool
     */
    public function getParent()
    {
        return FALSE;
    }

    /**
     * Initializes children, to be ready to use
     * Returns FALSE if children already initialized
     *
     * @return bool
     */
    private function initializeChildren()
    {
        if ($this->children == NULL) {
            $this->children = array();
            return TRUE;
        }
        return FALSE;
    }

    /**
     * Sets the children of the current menu element
     *
     * @param array $children
     */
    public function setChildren($children)
    {
        $this->initializeChildren();
        foreach ($children as $child) {
            /** @var MenuItem $child */
            $child->setParent($this);
            $child->setParentId($this->getId());
        }
        $this->children = $children;
    }

    /**
     * Adds a child to the current menu element
     *
     * @param MenuItem $child
     */
    public function addChild(MenuItem $child)
    {
        $this->initializeChildren();
        $child->setParent($this);
        $child->setParentId($this->getId());
        $this->children[] = $child;
    }

    /**
     * Tells whether the current menu element has children
     *
     * @return bool
     */
    public function hasChildren()
    {
        return count($this->getChildren()) > 0;
    }

    /**
     * Reads into the buffer the whole menu
     *
     * @return bool
     */
    public function preftechChildrenTree()
    {
        return self::preftechChildren($this->getChildren());
    }

    /**
     * Static recursive function that parses all element structure
     *
     * @param Menu $children
     * @param int|bool $current_id
     * @return bool
     */
    private static function preftechChildren($children, $current_id = FALSE)
    {
        if (!(count($children) > 0)) {
            return TRUE;
        }

        foreach ($children as $child) {
            /** @var MenuItem $child */
            if ($child->getId() == $current_id) {
                continue;
            }
            self::preftechChildren($child->getChildren(), $child->getId());
        }

        return TRUE;
    }

    /**
     * Helper method used to normalize URLs
     *
     * @param array $item
     * @param string $language_prefix
     * @return string
     */
    public static function getItemUrl($item, $language_prefix)
    {
        if (!$item['page_uri']) {
            $url = $item['item_uri'];
        } else {
            $url = $language_prefix . $item['page_uri'] . '.html';
        }

        return $url;
    }

}

/**
 * Menu item representation. Not a menu itself.
 *
 * @since        0.2
 */
class MenuItem extends Menu
{

    /** @var int */
    private $id;
    /** @var int */
    private $parent_id;
    /** @var string */
    private $relative_url;
    /** @var string */
    private $canonical_url;
    /** @var string */
    private $label;
    /** @var MenuItem */
    private $parent;

    /**
     * Returns ID of the current menu item
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets ID of the current menu item
     *
     * @param int $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * Returns ID of the parent menu item
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->parent_id;
    }

    /**
     * Sets ID of the parent menu item
     *
     * @param int $parent_id
     */
    public function setParentId($parent_id)
    {
        $this->parent_id = $parent_id;
    }

    /**
     * Returns relative URL of the item
     *
     * @return string
     */
    public function getRelativeUrl()
    {
        return $this->relative_url;
    }

    /**
     * Sets relative URL of the element
     *
     * @param string $relative_url
     */
    public function setRelativeUrl($relative_url)
    {
        $this->relative_url = $relative_url;
    }

    /**
     * Sets canonical absolute URL of the menu element
     *
     * @param string $canonical_url
     */
    public function setCanonicalAbsoluteUrl($canonical_url)
    {
        $this->canonical_url = $canonical_url;
    }

    /**
     * Returns absolute canonical URL, if it does not exist, then it is created from relative URL
     *
     * @return string
     */
    public function getCanonicalAbsoluteUrl()
    {
        if ($this->canonical_url === NULL) {
            $this->setCanonicalAbsoluteUrl(base_url() . $this->getRelativeUrl());
        }
        return $this->canonical_url;
    }

    /**
     * Returns label of the menu element
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * Sets label of the menu element
     *
     * @param string $label
     */
    public function setLabel($label)
    {
        $this->label = $label;
    }

    /**
     * Returns parent menu element
     *
     * @return Menu
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Sets parent element
     *
     * @param Menu $parent
     */
    public function setParent(Menu $parent)
    {
        $this->parent = $parent;
    }

    /**
     * Returns siblings of the current element
     *
     * @return array
     */
    public function getSiblings()
    {
        return $this->getParent()->getChildren();
    }

    /**
     * @return array
     * @deprecated as PepisCMS 1.0.0
     */
    public function getSiblinks()
    {
        return $this->getParent()->getChildren();
    }
}
